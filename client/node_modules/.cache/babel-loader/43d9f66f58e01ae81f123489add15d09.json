{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projekti2/sim-test/client/src/Components/NewTrial.js\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DatePicker from \"./DatePicker\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from 'axios';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginTop: 40\n  },\n  block: {\n    display: \"block\",\n    margin: 20\n  }\n}));\nexport default function NewTrial() {\n  const [spacing, setSpacing] = React.useState(2);\n  const [name, setName] = React.useState(0);\n  const [startDate, setStartDate] = React.useState(0);\n  const [endDate, setEndDate] = React.useState(0);\n  const [startRegDate, setStartRegDate] = React.useState(0);\n  const [endRegDate, setEndRegDate] = React.useState(0);\n  const [maxPart, setMaxPart] = React.useState(0);\n  const [price, setPrice] = React.useState(0);\n  const classes = useStyles();\n\n  const makeNewTrial = e => {\n    e.preventDefault();\n    const newTrial = {};\n    axios.post('http://localhost:3000/trial', {\n      id: Date.now(),\n      name: name,\n      startDate: startDate,\n      endDate: endDate,\n      registrationStartDate: startRegDate,\n      registrationEndDate: endRegDate,\n      maxPartipants: parseInt(maxPart),\n      priceInEUR: parseInt(price)\n    }).then(resp => {\n      console.log(resp.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const getDate = (date, purpose) => {\n    date.toISOString();\n    date.toLocaleDateString();\n    const formatedDate = new Date(date).toLocaleDateString(\"fr-CA\");\n\n    switch (purpose) {\n      case \"startDate\":\n        setStartDate(formatedDate);\n        break;\n\n      case \"endDate\":\n        setEndDate(formatedDate);\n        break;\n\n      case \"startRegDate\":\n        setStartRegDate(formatedDate);\n        break;\n\n      default:\n        setEndRegDate(formatedDate);\n        break;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: spacing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: makeNewTrial,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    label: \"Name\",\n    onChange: e => setName(e.currentTarget.value),\n    className: classes.block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    required: true,\n    getDate: getDate,\n    purpose: \"startDate\",\n    label: \"Start date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    required: true,\n    getDate: getDate,\n    purpose: \"endDate\",\n    label: \"End date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    required: true,\n    getDate: getDate,\n    purpose: \"startRegDate\",\n    label: \"Start registration date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    required: true,\n    getDate: getDate,\n    purpose: \"endRegDate\",\n    label: \"End registration date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    label: \"Maximal partipians\",\n    onChange: e => setMaxPart(e.currentTarget.value),\n    type: \"number\",\n    className: classes.block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    label: \"Price in EUR\",\n    onChange: e => setPrice(e.currentTarget.value),\n    type: \"number\",\n    className: classes.block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Submit\"))))));\n}","map":{"version":3,"sources":["/home/ivan/Documents/projekti2/sim-test/client/src/Components/NewTrial.js"],"names":["React","makeStyles","Grid","TextField","DatePicker","Button","axios","useStyles","theme","root","flexGrow","marginTop","block","display","margin","NewTrial","spacing","setSpacing","useState","name","setName","startDate","setStartDate","endDate","setEndDate","startRegDate","setStartRegDate","endRegDate","setEndRegDate","maxPart","setMaxPart","price","setPrice","classes","makeNewTrial","e","preventDefault","newTrial","post","id","Date","now","registrationStartDate","registrationEndDate","maxPartipants","parseInt","priceInEUR","then","resp","console","log","data","catch","error","getDate","date","purpose","toISOString","toLocaleDateString","formatedDate","currentTarget","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DatePicker from \"./DatePicker\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginTop: 40,\n  },\n  block: {\n    display: \"block\",\n    margin: 20,\n  },\n}));\n\nexport default function NewTrial() {\n  const [spacing, setSpacing] = React.useState(2);\n  const [name, setName] = React.useState(0);\n  const [startDate, setStartDate] = React.useState(0);\n  const [endDate, setEndDate] = React.useState(0);\n  const [startRegDate, setStartRegDate] = React.useState(0);\n  const [endRegDate, setEndRegDate] = React.useState(0);\n  const [maxPart, setMaxPart] = React.useState(0);\n  const [price, setPrice] = React.useState(0);\n  const classes = useStyles();\n\n  const makeNewTrial = (e) => {\n      e.preventDefault()\n    const newTrial = {\n\n    }\n    axios.post('http://localhost:3000/trial', {\n        id: Date.now(),\n        name: name,\n        startDate: startDate,\n        endDate: endDate,\n        registrationStartDate: startRegDate,\n        registrationEndDate: endRegDate,\n        maxPartipants: parseInt(maxPart),\n        priceInEUR:parseInt(price)\n}).then(resp => {\n    console.log(resp.data);\n}).catch(error => {\n    console.log(error);\n});   \n  };\n\n  const getDate = (date, purpose) => {\n      date.toISOString();\n      date.toLocaleDateString();\n      const formatedDate = new Date(date).toLocaleDateString(\"fr-CA\");\n    switch (purpose) {\n      case \"startDate\":\n        setStartDate(formatedDate);\n        break;\n      case \"endDate\":\n        setEndDate(formatedDate);\n        break;\n      case \"startRegDate\":\n        setStartRegDate(formatedDate);\n        break;          \n      default:\n        setEndRegDate(formatedDate);\n        break;\n    }\n    \n  };\n\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={spacing}>\n          <Grid item>\n              <form onSubmit={makeNewTrial}>\n            <TextField\n            required\n              label=\"Name\"\n              onChange={(e) => setName(e.currentTarget.value)}\n              className={classes.block}\n            />\n            <DatePicker\n            required\n              getDate={getDate}\n              purpose=\"startDate\"\n              label=\"Start date\"\n            />\n            <DatePicker required getDate={getDate} purpose=\"endDate\" label=\"End date\" />\n            <DatePicker\n            required\n              getDate={getDate}\n              purpose=\"startRegDate\"\n              label=\"Start registration date\"\n            />\n            <DatePicker\n            required\n              getDate={getDate}\n              purpose=\"endRegDate\"\n              label=\"End registration date\"\n            />\n            <TextField\n            required\n              label=\"Maximal partipians\"\n              onChange={(e) => setMaxPart(e.currentTarget.value)}\n              type=\"number\"\n              className={classes.block}\n            />\n            <TextField\n            required\n              label=\"Price in EUR\"\n              onChange={(e) => setPrice(e.currentTarget.value)}\n              type=\"number\"\n              className={classes.block}\n            />\n            <Button type=\"submit\" color=\"primary\" variant=\"contained\">\n              Submit\n            </Button>\n            </form>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}