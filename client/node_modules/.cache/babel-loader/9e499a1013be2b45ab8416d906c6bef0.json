{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projekti2/sim-test/client/src/Components/NewTrial.js\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DatePicker from \"./DatePicker\";\nimport Button from \"@material-ui/core/Button\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginTop: 40\n  },\n  block: {\n    display: \"block\",\n    margin: 20\n  }\n}));\nexport default function NewTrial() {\n  const [spacing, setSpacing] = React.useState(2);\n  const [name, setName] = React.useState(0);\n  const [startDate, setStartDate] = React.useState(0);\n  const [endDate, setEndDate] = React.useState(0);\n  const [startRegDate, setStartRegDate] = React.useState(0);\n  const [endRegDate, setEndRegDate] = React.useState(0);\n  const [maxPart, setMaxPart] = React.useState(0);\n  const [price, setPrice] = React.useState(0);\n  const classes = useStyles();\n\n  const fetchInputs = e => {\n    const newTrial = {\n      id: Date.now(),\n      name: name,\n      startDate: startDate,\n      endDate: endDate,\n      registrationStartDate: startRegDate,\n      registrationEndDate: endRegDate,\n      maxPartipants: parseInt(maxPart),\n      priceInEUR: parseInt(price)\n    };\n    console.log(newTrial);\n  };\n\n  const getDate = (date, purpose) => {\n    date.toISOString();\n    date.toLocaleDateString();\n    const formatedDate = new Date(date).toLocaleDateString(\"fr-CA\");\n\n    switch (purpose) {\n      case \"startDate\":\n        setStartDate(formatedDate);\n        break;\n\n      case \"endDate\":\n        setEndDate(formatedDate);\n        break;\n\n      case \"startRegDate\":\n        setStartRegDate(formatedDate);\n        break;\n\n      default:\n        setEndRegDate(formatedDate);\n        break;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: spacing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Name\",\n    onChange: e => setName(e.currentTarget.value),\n    className: classes.block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    getDate: getDate,\n    purpose: \"startDate\",\n    label: \"Start date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    getDate: getDate,\n    purpose: \"endDate\",\n    label: \"End date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    getDate: getDate,\n    purpose: \"startRegDate\",\n    label: \"Start registration date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    getDate: getDate,\n    purpose: \"endRegDate\",\n    label: \"End registration date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Maximal partipians\",\n    onChange: e => setMaxPart(e.currentTarget.value),\n    type: \"number\",\n    className: classes.block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Price in EUR\",\n    onChange: e => setPrice(e.currentTarget.value),\n    type: \"number\",\n    className: classes.block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: fetchInputs,\n    color: \"primary\",\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Submit\")))));\n}","map":{"version":3,"sources":["/home/ivan/Documents/projekti2/sim-test/client/src/Components/NewTrial.js"],"names":["React","makeStyles","Grid","TextField","DatePicker","Button","useStyles","theme","root","flexGrow","marginTop","block","display","margin","NewTrial","spacing","setSpacing","useState","name","setName","startDate","setStartDate","endDate","setEndDate","startRegDate","setStartRegDate","endRegDate","setEndRegDate","maxPart","setMaxPart","price","setPrice","classes","fetchInputs","e","newTrial","id","Date","now","registrationStartDate","registrationEndDate","maxPartipants","parseInt","priceInEUR","console","log","getDate","date","purpose","toISOString","toLocaleDateString","formatedDate","currentTarget","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DatePicker from \"./DatePicker\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginTop: 40,\n  },\n  block: {\n    display: \"block\",\n    margin: 20,\n  },\n}));\n\nexport default function NewTrial() {\n  const [spacing, setSpacing] = React.useState(2);\n  const [name, setName] = React.useState(0);\n  const [startDate, setStartDate] = React.useState(0);\n  const [endDate, setEndDate] = React.useState(0);\n  const [startRegDate, setStartRegDate] = React.useState(0);\n  const [endRegDate, setEndRegDate] = React.useState(0);\n  const [maxPart, setMaxPart] = React.useState(0);\n  const [price, setPrice] = React.useState(0);\n  const classes = useStyles();\n\n  const fetchInputs = (e) => {\n    const newTrial = {\n        id: Date.now(),\n        name: name,\n        startDate: startDate,\n        endDate: endDate,\n        registrationStartDate: startRegDate,\n        registrationEndDate: endRegDate,\n        maxPartipants: parseInt(maxPart),\n        priceInEUR:parseInt(price)\n    }\n    console.log(newTrial)\n  };\n\n  const getDate = (date, purpose) => {\n      date.toISOString();\n      date.toLocaleDateString();\n      const formatedDate = new Date(date).toLocaleDateString(\"fr-CA\");\n    switch (purpose) {\n      case \"startDate\":\n        setStartDate(formatedDate);\n        break;\n      case \"endDate\":\n        setEndDate(formatedDate);\n        break;\n      case \"startRegDate\":\n        setStartRegDate(formatedDate);\n        break;          \n      default:\n        setEndRegDate(formatedDate);\n        break;\n    }\n    \n  };\n\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={spacing}>\n          <Grid item>\n            <TextField\n              label=\"Name\"\n              onChange={(e) => setName(e.currentTarget.value)}\n              className={classes.block}\n            />\n            <DatePicker\n              getDate={getDate}\n              purpose=\"startDate\"\n              label=\"Start date\"\n            />\n            <DatePicker getDate={getDate} purpose=\"endDate\" label=\"End date\" />\n            <DatePicker\n              getDate={getDate}\n              purpose=\"startRegDate\"\n              label=\"Start registration date\"\n            />\n            <DatePicker\n              getDate={getDate}\n              purpose=\"endRegDate\"\n              label=\"End registration date\"\n            />\n            <TextField\n              label=\"Maximal partipians\"\n              onChange={(e) => setMaxPart(e.currentTarget.value)}\n              type=\"number\"\n              className={classes.block}\n            />\n            <TextField\n              label=\"Price in EUR\"\n              onChange={(e) => setPrice(e.currentTarget.value)}\n              type=\"number\"\n              className={classes.block}\n            />\n            <Button onClick={fetchInputs} color=\"primary\" variant=\"contained\">\n              Submit\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}