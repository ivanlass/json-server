{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./Card\";\n\nfunction TrialList(props) {\n  const loggedUser = props.user;\n  const [trials, setTrials] = useState([]);\n  const [enrollment, setEnrollment] = useState([]);\n  const [enrolled, setEnrolled] = useState([]);\n  const [howManyEnrolled, setHowManyEnrolled] = useState([1]);\n\n  const fetch = async (url, sets) => {\n    const result = await axios(url);\n    sets(result.data);\n  }; //Fetch trials and enrollments\n\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/Trial\", setTrials);\n    fetch(\"http://localhost:3000/Enrollment\", setEnrollment);\n  }, []); //calculate how many are enrollments \n\n  useEffect(() => {\n    const totalCount = [];\n\n    for (let index = 0; index < enrollment.length; index++) {\n      for (let i = 0; i < totalCount.length; index++) {\n        if (totalCount[i].id === enrollment[index].id) {\n          totalCount[i].count = +1;\n        } else totalCount.push({\n          id: enrollment[index].id,\n          count: 1\n        });\n      }\n    }\n\n    setHowManyEnrolled(totalCount);\n  }, []); //when enrollments is fetched filter enrollments that this user participate\n  //and store in @enrolled\n\n  useEffect(() => {\n    let enrolledTrials = [];\n\n    for (let index = 0; index < enrollment.length; index++) {\n      if (enrollment[index].userId == loggedUser) {\n        enrolledTrials.push(enrollment[index].id);\n      }\n    }\n\n    setEnrolled(enrolledTrials);\n  }, [enrollment]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, trials.map(trial => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"a\") //<Card key={trial.id} {...trial} isEnrolled={enrolled.includes(trial.id)}/>\n  ));\n}\n\nexport default TrialList;","map":{"version":3,"sources":["/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js"],"names":["React","useState","useEffect","axios","Card","TrialList","props","loggedUser","user","trials","setTrials","enrollment","setEnrollment","enrolled","setEnrolled","howManyEnrolled","setHowManyEnrolled","fetch","url","sets","result","data","totalCount","index","length","i","id","count","push","enrolledTrials","userId","map","trial"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAzB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,CAAC,CAAD,CAAD,CAAtD;;AAEA,QAAMgB,KAAK,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACjC,UAAMC,MAAM,GAAG,MAAMjB,KAAK,CAACe,GAAD,CAA1B;AACAC,IAAAA,IAAI,CAACC,MAAM,CAACC,IAAR,CAAJ;AACD,GAHD,CAPwB,CAYxB;;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,KAAK,CAAC,6BAAD,EAAgCP,SAAhC,CAAL;AACAO,IAAAA,KAAK,CAAC,kCAAD,EAAqCL,aAArC,CAAL;AACD,GAHQ,EAGN,EAHM,CAAT,CAbwB,CAmBxB;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGZ,UAAU,CAACa,MAAvC,EAA+CD,KAAK,EAApD,EAAwD;AACpD,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACE,MAA/B,EAAuCD,KAAK,EAA5C,EAAgD;AAC9C,YAAGD,UAAU,CAACG,CAAD,CAAV,CAAcC,EAAd,KAAqBf,UAAU,CAACY,KAAD,CAAV,CAAkBG,EAA1C,EAA6C;AAC3CJ,UAAAA,UAAU,CAACG,CAAD,CAAV,CAAcE,KAAd,GAAqB,CAAE,CAAvB;AACD,SAFD,MAEML,UAAU,CAACM,IAAX,CAAgB;AAACF,UAAAA,EAAE,EAAEf,UAAU,CAACY,KAAD,CAAV,CAAkBG,EAAvB;AAA2BC,UAAAA,KAAK,EAAE;AAAlC,SAAhB;AACP;AACJ;;AACDX,IAAAA,kBAAkB,CAACM,UAAD,CAAlB;AACH,GAVQ,EAUN,EAVM,CAAT,CArBwB,CAiCxB;AACA;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2B,cAAc,GAAG,EAArB;;AACA,SAAK,IAAIN,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGZ,UAAU,CAACa,MAAvC,EAA+CD,KAAK,EAApD,EAAwD;AACtD,UAAIZ,UAAU,CAACY,KAAD,CAAV,CAAkBO,MAAlB,IAA4BvB,UAAhC,EAA4C;AAC1CsB,QAAAA,cAAc,CAACD,IAAf,CAAoBjB,UAAU,CAACY,KAAD,CAAV,CAAkBG,EAAtC;AACD;AACF;;AACDZ,IAAAA,WAAW,CAACe,cAAD,CAAX;AACD,GARQ,EAQN,CAAClB,UAAD,CARM,CAAT;AAWA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIF,MAAM,CAACsB,GAAP,CAAYC,KAAD,iBACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADS,CAET;AAFF,GAFJ,CADF;AASD;;AAED,eAAe3B,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./Card\";\n\nfunction TrialList(props) {\n  const loggedUser = props.user\n  const [trials, setTrials] = useState([]);\n  const [enrollment, setEnrollment] = useState([]);\n  const [enrolled, setEnrolled] = useState([]);\n  const [howManyEnrolled, setHowManyEnrolled] = useState([1]);\n\n  const fetch = async (url, sets) => {\n    const result = await axios(url);\n    sets(result.data);\n  };\n\n  //Fetch trials and enrollments\n  useEffect(() => {\n    fetch(\"http://localhost:3000/Trial\", setTrials);\n    fetch(\"http://localhost:3000/Enrollment\", setEnrollment);\n  }, []);\n\n\n  //calculate how many are enrollments \n\n  useEffect(() => {\n      const totalCount = []\n      for (let index = 0; index < enrollment.length; index++) {\n          for (let i = 0; i < totalCount.length; index++) {\n            if(totalCount[i].id === enrollment[index].id){\n              totalCount[i].count =+ 1\n            }else totalCount.push({id: enrollment[index].id, count: 1}) \n          }\n      }\n      setHowManyEnrolled(totalCount)\n  }, []);\n\n  //when enrollments is fetched filter enrollments that this user participate\n  //and store in @enrolled\n  useEffect(() => {\n    let enrolledTrials = [];\n    for (let index = 0; index < enrollment.length; index++) {\n      if (enrollment[index].userId == loggedUser) {\n        enrolledTrials.push(enrollment[index].id);\n      }\n    }\n    setEnrolled(enrolledTrials)\n  }, [enrollment]);\n\n\n  return (\n    <div>\n      {\n        trials.map((trial) => (\n          <p>a</p>\n          //<Card key={trial.id} {...trial} isEnrolled={enrolled.includes(trial.id)}/>\n          ))}\n    </div>\n  );\n}\n\nexport default TrialList;\n"]},"metadata":{},"sourceType":"module"}