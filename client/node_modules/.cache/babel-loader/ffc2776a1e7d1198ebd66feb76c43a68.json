{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\n\nfunction TrialList(props) {\n  const [howManyEnrolled, setHowManyEnrolled] = useState([]);\n  const enrollment = props.enrollment;\n  const enrolled = props.enrolled;\n  const trials = props.trials;\n  console.log(enrolled.length); //  calculate how many are enrollments \n\n  useEffect(() => {\n    const totalCount = [];\n    const count = {}; //extract trialId and store in @totalCount\n\n    for (let index = 0; index < enrollment.length; index++) {\n      totalCount.push(enrollment[index].trialId);\n    } //count duplicates and you get how many participants are in trials\n    //stored in @count than stored in @howManyEnrolled\n\n\n    totalCount.forEach(function (i) {\n      count[i] = (count[i] || 0) + 1;\n    });\n    setHowManyEnrolled(count);\n  }, [enrollment]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, trials.map(trial => /*#__PURE__*/React.createElement(Card, Object.assign({\n    key: trial.id\n  }, trial, {\n    isEnrolled: enrolled.includes(trial.id),\n    isMaxEnrolled: trial.maxPartipants >= howManyEnrolled[trial.id],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default TrialList;","map":{"version":3,"sources":["/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js"],"names":["React","useState","useEffect","Card","TrialList","props","howManyEnrolled","setHowManyEnrolled","enrollment","enrolled","trials","console","log","length","totalCount","count","index","push","trialId","forEach","i","map","trial","id","includes","maxPartipants"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAMO,UAAU,GAAGH,KAAK,CAACG,UAAzB;AACA,QAAMC,QAAQ,GAAIJ,KAAK,CAACI,QAAxB;AACA,QAAMC,MAAM,GAAGL,KAAK,CAACK,MAArB;AAEFC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,MAArB,EAN0B,CAQ1B;;AACEX,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,UAAU,GAAG,EAAnB;AACA,UAAMC,KAAK,GAAG,EAAd,CAFY,CAGZ;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGR,UAAU,CAACK,MAAvC,EAA+CG,KAAK,EAApD,EAAwD;AACtDF,MAAAA,UAAU,CAACG,IAAX,CAAgBT,UAAU,CAACQ,KAAD,CAAV,CAAkBE,OAAlC;AACD,KANW,CAOZ;AACA;;;AACAJ,IAAAA,UAAU,CAACK,OAAX,CAAmB,UAASC,CAAT,EAAY;AAAEL,MAAAA,KAAK,CAACK,CAAD,CAAL,GAAW,CAACL,KAAK,CAACK,CAAD,CAAL,IAAU,CAAX,IAAgB,CAA3B;AAA8B,KAA/D;AACAb,IAAAA,kBAAkB,CAACQ,KAAD,CAAlB;AACH,GAXQ,EAWN,CAACP,UAAD,CAXM,CAAT;AAiBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIE,MAAM,CAACW,GAAP,CAAYC,KAAD,iBACT,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACC;AADb,KAEMD,KAFN;AAGE,IAAA,UAAU,EAAEb,QAAQ,CAACe,QAAT,CAAkBF,KAAK,CAACC,EAAxB,CAHd;AAIE,IAAA,aAAa,EAAED,KAAK,CAACG,aAAN,IAAuBnB,eAAe,CAACgB,KAAK,CAACC,EAAP,CAJvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFJ,CADF;AAaD;;AAED,eAAenB,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\n\nfunction TrialList(props) {\n  const [howManyEnrolled, setHowManyEnrolled] = useState([]);\n  const enrollment = props.enrollment;\n  const enrolled  = props.enrolled\n  const trials = props.trials\n\nconsole.log(enrolled.length)\n\n//  calculate how many are enrollments \n  useEffect(() => {\n      const totalCount = []\n      const count = {};\n      //extract trialId and store in @totalCount\n      for (let index = 0; index < enrollment.length; index++) {\n        totalCount.push(enrollment[index].trialId)\n      }\n      //count duplicates and you get how many participants are in trials\n      //stored in @count than stored in @howManyEnrolled\n      totalCount.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n      setHowManyEnrolled(count)\n  }, [enrollment]);\n\n\n\n\n  \n  return (\n    <div>\n      {\n        trials.map((trial) => (\n          <Card \n            key={trial.id} \n            {...trial} \n            isEnrolled={enrolled.includes(trial.id)}\n            isMaxEnrolled={trial.maxPartipants >= howManyEnrolled[trial.id]}  \n          />\n          ))}\n    </div>\n  );\n}\n\nexport default TrialList;\n"]},"metadata":{},"sourceType":"module"}