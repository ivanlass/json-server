{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projekti2/sim-test/client/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Login from \"./Views/Login\";\nimport Admin from \"./Views/Admin\";\nimport User from \"./Views/User\";\n\nfunction App() {\n  const [roleMapping, setRoleMapping] = useState({});\n  const [role, setRole] = useState({});\n  const [users, setUsers] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [loggedUser, setLoggedUser] = useState({});\n  const [whoIsLogged, setWhoIsLogged] = useState(loggedUser.id || 0);\n\n  const fetch = async (url, sets) => {\n    const result = await axios(url);\n    sets(result.data);\n  };\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/role\", setRole);\n    fetch(\"http://localhost:3000/roleMapping\", setRoleMapping);\n  }, []);\n  useEffect(() => {\n    checkUser();\n  }, [users]);\n\n  const submit = async e => {\n    e.preventDefault();\n    setUserInput(e.target.dataset.value);\n    fetch(\"http://localhost:3000/user\", setUsers);\n  }; //checking if user exist and parsing the role\n\n\n  const checkUser = () => {\n    users.map(user => {\n      if (user.email === userInput) roleMapping.map((role, user) => {\n        if (role.userId === user.id) {\n          console.log(\"naso ga\");\n          setRole(role.roleId);\n          setLoggedUser(user);\n        }\n      });\n    });\n  }; // based on whoislogged int it will render view\n\n\n  let view;\n\n  if (whoIsLogged === 0) {\n    view = /*#__PURE__*/React.createElement(Login, {\n      submit: submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 12\n      }\n    });\n  } else if (whoIsLogged === 1) {\n    view = /*#__PURE__*/React.createElement(Admin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 12\n      }\n    });\n  } else view = /*#__PURE__*/React.createElement(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 10\n    }\n  }, view);\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ivan/Documents/projekti2/sim-test/client/src/App.js"],"names":["React","useState","useEffect","axios","Login","Admin","User","App","roleMapping","setRoleMapping","role","setRole","users","setUsers","userInput","setUserInput","loggedUser","setLoggedUser","whoIsLogged","setWhoIsLogged","id","fetch","url","sets","result","data","checkUser","submit","e","preventDefault","target","dataset","value","map","user","email","userId","console","log","roleId","view"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,IAAP,MAAiB,cAAjB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAACe,UAAU,CAACI,EAAX,IAAiB,CAAlB,CAA9C;;AAEA,QAAMC,KAAK,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACjC,UAAMC,MAAM,GAAG,MAAMrB,KAAK,CAACmB,GAAD,CAA1B;AACAC,IAAAA,IAAI,CAACC,MAAM,CAACC,IAAR,CAAJ;AACD,GAHD;;AAKAvB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,KAAK,CAAC,4BAAD,EAA+BV,OAA/B,CAAL;AACAU,IAAAA,KAAK,CAAC,mCAAD,EAAsCZ,cAAtC,CAAL;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACd,KAAD,CAFM,CAAT;;AAIA,QAAMe,MAAM,GAAG,MAAOC,CAAP,IAAa;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAd,IAAAA,YAAY,CAACa,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBC,KAAlB,CAAZ;AACAX,IAAAA,KAAK,CAAC,4BAAD,EAA+BR,QAA/B,CAAL;AAED,GALD,CAtBa,CA8Bb;;;AACA,QAAMa,SAAS,GAAG,MAAM;AACtBd,IAAAA,KAAK,CAACqB,GAAN,CAAUC,IAAI,IAAI;AAChB,UAAGA,IAAI,CAACC,KAAL,KAAerB,SAAlB,EACEN,WAAW,CAACyB,GAAZ,CAAgB,CAACvB,IAAD,EAAOwB,IAAP,KAAe;AAC7B,YAAGxB,IAAI,CAAC0B,MAAL,KAAgBF,IAAI,CAACd,EAAxB,EAA2B;AACzBiB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA3B,UAAAA,OAAO,CAACD,IAAI,CAAC6B,MAAN,CAAP;AACAtB,UAAAA,aAAa,CAACiB,IAAD,CAAb;AACD;AACF,OAND,CAD0B;AAS3B,KAVH;AAYD,GAbD,CA/Ba,CA8Cb;;;AACA,MAAIM,IAAJ;;AACA,MAAItB,WAAW,KAAK,CAApB,EAAuB;AACrBsB,IAAAA,IAAI,gBAAG,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAEb,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO,IAAIT,WAAW,KAAK,CAApB,EAAuB;AAC5BsB,IAAAA,IAAI,gBAAG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFM,MAEAA,IAAI,gBAAG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;;AAEP,sBAAO;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBA,IAAtB,CAAP;AACD;;AAED,eAAejC,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nimport Login from \"./Views/Login\";\nimport Admin from \"./Views/Admin\";\nimport User from \"./Views/User\";\n\nfunction App() {\n  const [roleMapping, setRoleMapping] = useState({});\n  const [role, setRole] = useState({});\n  const [users, setUsers] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [loggedUser, setLoggedUser] = useState({})\n  const [whoIsLogged, setWhoIsLogged] = useState(loggedUser.id || 0);\n\n  const fetch = async (url, sets) => {\n    const result = await axios(url);\n    sets(result.data);\n  };\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/role\", setRole);\n    fetch(\"http://localhost:3000/roleMapping\", setRoleMapping);\n  }, []);\n\n  useEffect(() => {\n    checkUser()\n  }, [users]);\n\n  const submit = async (e) => {\n    e.preventDefault();\n    setUserInput(e.target.dataset.value)\n    fetch(\"http://localhost:3000/user\", setUsers)\n    \n  };\n\n\n  //checking if user exist and parsing the role\n  const checkUser = () => {\n    users.map(user => {\n      if(user.email === userInput)(\n        roleMapping.map((role, user)=> {\n          if(role.userId === user.id){\n            console.log(\"naso ga\")\n            setRole(role.roleId)\n            setLoggedUser(user)\n          }\n        })\n        )\n      }\n    )\n  }\n\n  // based on whoislogged int it will render view\n  let view;\n  if (whoIsLogged === 0) {\n    view = <Login submit={submit} />;\n  } else if (whoIsLogged === 1) {\n    view = <Admin />;\n  } else view = <User />;\n\n  return <div className=\"App\">{view}</div>;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}