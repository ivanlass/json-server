{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./CardUser\";\n\nfunction TrialList(props) {\n  const [howManyEnrolled, setHowManyEnrolled] = useState([]);\n  const enrollment = props.enrollment;\n  const enrolled = props.enrolled;\n  const trials = props.trials; //  calculate how many are enrollments\n\n  useEffect(() => {\n    const totalCount = [];\n    const count = {}; //extract trialId and store in @totalCount\n\n    for (let index = 0; index < enrollment.length; index++) {\n      totalCount.push(enrollment[index].trialId);\n    } //count duplicates and you get how many participants are in trials\n    //stored in @count than stored in @howManyEnrolled\n\n\n    totalCount.forEach(function (i) {\n      count[i] = (count[i] || 0) + 1;\n    });\n    setHowManyEnrolled(count);\n  }, [enrollment]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, trials.map(trial => {\n    //Enrolled trials tab\n    if (props.enrolledRender) {\n      if (enrolled.includes(trial.id + \"approved\")) {\n        return /*#__PURE__*/React.createElement(Card, Object.assign({\n          key: trial.id\n        }, trial, {\n          loggedUser: props.loggedUser,\n          isEnrolled: true,\n          isMaxEnrolled: trial.maxPartipants >= howManyEnrolled[trial.id],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }\n        }));\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(Card, Object.assign({\n        key: trial.id\n      }, trial, {\n        getEnrollment: props.getEnrollment,\n        setEnrollment: props.setEnrollment,\n        loggedUser: props.loggedUser,\n        isApproved: enrolled.includes(trial.id + \"approved\"),\n        isRejected: enrolled.includes(trial.id + \"rejected\"),\n        isCancelled: enrolled.includes(trial.id + \"cancelled\"),\n        isPending: enrolled.includes(trial.id + \"pending\"),\n        isMaxEnrolled: trial.maxPartipants >= howManyEnrolled[trial.id],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      }));\n    }\n  }));\n}\n\nexport default TrialList;","map":{"version":3,"sources":["/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js"],"names":["React","useState","useEffect","Card","TrialList","props","howManyEnrolled","setHowManyEnrolled","enrollment","enrolled","trials","totalCount","count","index","length","push","trialId","forEach","i","map","trial","enrolledRender","includes","id","loggedUser","maxPartipants","getEnrollment","setEnrollment"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAMO,UAAU,GAAGH,KAAK,CAACG,UAAzB;AACA,QAAMC,QAAQ,GAAGJ,KAAK,CAACI,QAAvB;AACA,QAAMC,MAAM,GAAGL,KAAK,CAACK,MAArB,CAJwB,CAMxB;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,UAAU,GAAG,EAAnB;AACA,UAAMC,KAAK,GAAG,EAAd,CAFc,CAGd;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,UAAU,CAACM,MAAvC,EAA+CD,KAAK,EAApD,EAAwD;AACtDF,MAAAA,UAAU,CAACI,IAAX,CAAgBP,UAAU,CAACK,KAAD,CAAV,CAAkBG,OAAlC;AACD,KANa,CAOd;AACA;;;AACAL,IAAAA,UAAU,CAACM,OAAX,CAAmB,UAAUC,CAAV,EAAa;AAC9BN,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAW,CAACN,KAAK,CAACM,CAAD,CAAL,IAAY,CAAb,IAAkB,CAA7B;AACD,KAFD;AAGAX,IAAAA,kBAAkB,CAACK,KAAD,CAAlB;AACD,GAbQ,EAaN,CAACJ,UAAD,CAbM,CAAT;AAeA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,MAAM,CAACS,GAAP,CAAYC,KAAD,IAAW;AACrB;AACA,QAAIf,KAAK,CAACgB,cAAV,EAA0B;AACxB,UAAIZ,QAAQ,CAACa,QAAT,CAAkBF,KAAK,CAACG,EAAN,GAAW,UAA7B,CAAJ,EAA8C;AAC5C,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEH,KAAK,CAACG;AADb,WAEMH,KAFN;AAGE,UAAA,UAAU,EAAEf,KAAK,CAACmB,UAHpB;AAIE,UAAA,UAAU,EAAE,IAJd;AAKE,UAAA,aAAa,EAAEJ,KAAK,CAACK,aAAN,IAAuBnB,eAAe,CAACc,KAAK,CAACG,EAAP,CALvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD;AACF,KAZD,MAYO;AACL,0BACE,oBAAC,IAAD;AACE,QAAA,GAAG,EAAEH,KAAK,CAACG;AADb,SAEMH,KAFN;AAGE,QAAA,aAAa,EAAEf,KAAK,CAACqB,aAHvB;AAIE,QAAA,aAAa,EAAErB,KAAK,CAACsB,aAJvB;AAKE,QAAA,UAAU,EAAEtB,KAAK,CAACmB,UALpB;AAME,QAAA,UAAU,EAAEf,QAAQ,CAACa,QAAT,CAAkBF,KAAK,CAACG,EAAN,GAAW,UAA7B,CANd;AAOE,QAAA,UAAU,EAAEd,QAAQ,CAACa,QAAT,CAAkBF,KAAK,CAACG,EAAN,GAAW,UAA7B,CAPd;AAQE,QAAA,WAAW,EAAEd,QAAQ,CAACa,QAAT,CAAkBF,KAAK,CAACG,EAAN,GAAW,WAA7B,CARf;AASE,QAAA,SAAS,EAAEd,QAAQ,CAACa,QAAT,CAAkBF,KAAK,CAACG,EAAN,GAAW,SAA7B,CATb;AAUE,QAAA,aAAa,EAAEH,KAAK,CAACK,aAAN,IAAuBnB,eAAe,CAACc,KAAK,CAACG,EAAP,CAVvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAcD;AACF,GA9BA,CADH,CADF;AAmCD;;AAED,eAAenB,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"./CardUser\";\n\nfunction TrialList(props) {\n  const [howManyEnrolled, setHowManyEnrolled] = useState([]);\n  const enrollment = props.enrollment;\n  const enrolled = props.enrolled;\n  const trials = props.trials;\n\n  //  calculate how many are enrollments\n  useEffect(() => {\n    const totalCount = [];\n    const count = {};\n    //extract trialId and store in @totalCount\n    for (let index = 0; index < enrollment.length; index++) {\n      totalCount.push(enrollment[index].trialId);\n    }\n    //count duplicates and you get how many participants are in trials\n    //stored in @count than stored in @howManyEnrolled\n    totalCount.forEach(function (i) {\n      count[i] = (count[i] || 0) + 1;\n    });\n    setHowManyEnrolled(count);\n  }, [enrollment]);\n\n  return (\n    <div>\n      {trials.map((trial) => {\n        //Enrolled trials tab\n        if (props.enrolledRender) {\n          if (enrolled.includes(trial.id + \"approved\")) {\n            return (\n              <Card\n                key={trial.id}\n                {...trial}\n                loggedUser={props.loggedUser}\n                isEnrolled={true}\n                isMaxEnrolled={trial.maxPartipants >= howManyEnrolled[trial.id]}\n              />\n            );\n          }\n        } else {\n          return (\n            <Card\n              key={trial.id}\n              {...trial}\n              getEnrollment={props.getEnrollment}\n              setEnrollment={props.setEnrollment}\n              loggedUser={props.loggedUser}\n              isApproved={enrolled.includes(trial.id + \"approved\")}\n              isRejected={enrolled.includes(trial.id + \"rejected\")}\n              isCancelled={enrolled.includes(trial.id + \"cancelled\")}\n              isPending={enrolled.includes(trial.id + \"pending\")}\n              isMaxEnrolled={trial.maxPartipants >= howManyEnrolled[trial.id]}\n            />\n          );\n        }\n      })}\n    </div>\n  );\n}\n\nexport default TrialList;\n"]},"metadata":{},"sourceType":"module"}