{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./CardUser\";\n\nfunction TrialList(props) {\n  const [howManyEnrolled, setHowManyEnrolled] = useState([]);\n  const enrollment = props.enrollment;\n  const enrolled = props.enrolled;\n  const trials = props.trials; //  calculate how many are enrollments \n\n  useEffect(() => {\n    const totalCount = [];\n    const count = {}; //extract trialId and store in @totalCount\n\n    for (let index = 0; index < enrollment.length; index++) {\n      totalCount.push(enrollment[index].trialId);\n    } //count duplicates and you get how many participants are in trials\n    //stored in @count than stored in @howManyEnrolled\n\n\n    totalCount.forEach(function (i) {\n      count[i] = (count[i] || 0) + 1;\n    });\n    setHowManyEnrolled(count);\n  }, [enrollment]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, trials.map(trial => {\n    console.log(enrolled.includes(trial.id + \"pending\")); //Enrolled trials tab\n\n    if (props.enrolledRender) {\n      if (enrolled.includes(trial.id + \"approved\")) {\n        return /*#__PURE__*/React.createElement(Card, Object.assign({\n          key: trial.id\n        }, trial, {\n          loggedUser: props.loggedUser,\n          isEnrolled: enrolled.includes(trial.id),\n          isMaxEnrolled: trial.maxPartipants >= howManyEnrolled[trial.id],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 18\n          }\n        }));\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(Card, Object.assign({\n        key: trial.id\n      }, trial, {\n        loggedUser: props.loggedUser,\n        isApproved: enrolled.includes(trial.id + \"approved\"),\n        isRejected: enrolled.includes(trial.id + \"rejected\"),\n        isCancelled: enrolled.includes(trial.id + \"cancelled\"),\n        isMaxEnrolled: trial.maxPartipants >= howManyEnrolled[trial.id],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 23\n        }\n      }));\n    }\n  }));\n}\n\nexport default TrialList;","map":{"version":3,"sources":["/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js"],"names":["React","useState","useEffect","Card","TrialList","props","howManyEnrolled","setHowManyEnrolled","enrollment","enrolled","trials","totalCount","count","index","length","push","trialId","forEach","i","map","trial","console","log","includes","id","enrolledRender","loggedUser","maxPartipants"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAMO,UAAU,GAAGH,KAAK,CAACG,UAAzB;AACA,QAAMC,QAAQ,GAAIJ,KAAK,CAACI,QAAxB;AACA,QAAMC,MAAM,GAAGL,KAAK,CAACK,MAArB,CAJwB,CAOxB;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,UAAU,GAAG,EAAnB;AACE,UAAMC,KAAK,GAAG,EAAd,CAFY,CAGZ;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,UAAU,CAACM,MAAvC,EAA+CD,KAAK,EAApD,EAAwD;AACtDF,MAAAA,UAAU,CAACI,IAAX,CAAgBP,UAAU,CAACK,KAAD,CAAV,CAAkBG,OAAlC;AACD,KANW,CAOZ;AACA;;;AACAL,IAAAA,UAAU,CAACM,OAAX,CAAmB,UAASC,CAAT,EAAY;AAAEN,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAW,CAACN,KAAK,CAACM,CAAD,CAAL,IAAU,CAAX,IAAgB,CAA3B;AAA8B,KAA/D;AACAX,IAAAA,kBAAkB,CAACK,KAAD,CAAlB;AACD,GAXM,EAWJ,CAACJ,UAAD,CAXI,CAAT;AAgBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIE,MAAM,CAACS,GAAP,CAAYC,KAAD,IAAW;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,CAAkBH,KAAK,CAACI,EAAN,GAAS,SAA3B,CAAZ,EADoB,CAEpB;;AACA,QAAInB,KAAK,CAACoB,cAAV,EAAyB;AACvB,UAAGhB,QAAQ,CAACc,QAAT,CAAkBH,KAAK,CAACI,EAAN,GAAS,UAA3B,CAAH,EAA0C;AAC5C,4BAAO,oBAAC,IAAD;AACL,UAAA,GAAG,EAAEJ,KAAK,CAACI;AADN,WAEDJ,KAFC;AAGL,UAAA,UAAU,EAAEf,KAAK,CAACqB,UAHb;AAIL,UAAA,UAAU,EAAEjB,QAAQ,CAACc,QAAT,CAAkBH,KAAK,CAACI,EAAxB,CAJP;AAKL,UAAA,aAAa,EAAEJ,KAAK,CAACO,aAAN,IAAuBrB,eAAe,CAACc,KAAK,CAACI,EAAP,CALhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAOG;AACJ,KAVC,MAUI;AAAC,0BAAO,oBAAC,IAAD;AACV,QAAA,GAAG,EAAEJ,KAAK,CAACI;AADD,SAENJ,KAFM;AAGV,QAAA,UAAU,EAAEf,KAAK,CAACqB,UAHR;AAIV,QAAA,UAAU,EAAEjB,QAAQ,CAACc,QAAT,CAAkBH,KAAK,CAACI,EAAN,GAAS,UAA3B,CAJF;AAKV,QAAA,UAAU,EAAEf,QAAQ,CAACc,QAAT,CAAkBH,KAAK,CAACI,EAAN,GAAS,UAA3B,CALF;AAMV,QAAA,WAAW,EAAEf,QAAQ,CAACc,QAAT,CAAkBH,KAAK,CAACI,EAAN,GAAS,WAA3B,CANH;AAOV,QAAA,aAAa,EAAEJ,KAAK,CAACO,aAAN,IAAuBrB,eAAe,CAACc,KAAK,CAACI,EAAP,CAP3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AAQF;AACJ,GAtBD,CAFJ,CADF;AA6BD;;AAED,eAAepB,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"./CardUser\";\n\nfunction TrialList(props) {\n  const [howManyEnrolled, setHowManyEnrolled] = useState([]);\n  const enrollment = props.enrollment;\n  const enrolled  = props.enrolled\n  const trials = props.trials\n\n  \n  //  calculate how many are enrollments \n  useEffect(() => {\n    const totalCount = []\n      const count = {};\n      //extract trialId and store in @totalCount\n      for (let index = 0; index < enrollment.length; index++) {\n        totalCount.push(enrollment[index].trialId)\n      }\n      //count duplicates and you get how many participants are in trials\n      //stored in @count than stored in @howManyEnrolled\n      totalCount.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n      setHowManyEnrolled(count)\n    }, [enrollment]);\n    \n    \n\n  \n  return (\n    <div>\n      {\n        trials.map((trial) => {\n          console.log(enrolled.includes(trial.id+\"pending\"))\n          //Enrolled trials tab\n          if (props.enrolledRender){\n            if(enrolled.includes(trial.id+\"approved\")){\n          return <Card \n            key={trial.id} \n            {...trial} \n            loggedUser={props.loggedUser}\n            isEnrolled={enrolled.includes(trial.id)}\n            isMaxEnrolled={trial.maxPartipants >= howManyEnrolled[trial.id]\n            }  \n          />}\n        }else {return <Card \n            key={trial.id} \n            {...trial} \n            loggedUser={props.loggedUser}\n            isApproved={enrolled.includes(trial.id+\"approved\")}\n            isRejected={enrolled.includes(trial.id+\"rejected\")}\n            isCancelled={enrolled.includes(trial.id+\"cancelled\")}\n            isMaxEnrolled={trial.maxPartipants >= howManyEnrolled[trial.id]}  \n          />}\n        }\n      )}\n    </div>\n  );\n}\n\nexport default TrialList;\n"]},"metadata":{},"sourceType":"module"}