{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./Card\";\n\nfunction TrialList(props) {\n  const [trials, setTrials] = useState([]);\n  const [howManyEnrolled, setHowManyEnrolled] = useState([]);\n  const enrollment = props.enrollment;\n  const enrolled = props.enrolled;\n\n  const fetch = async (url, sets) => {\n    const result = await axios(url);\n    sets(result.data);\n  }; //Fetch trials\n\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/Trial\", setTrials);\n  }, []); //  calculate how many are enrollments \n\n  useEffect(() => {\n    const totalCount = [];\n    const count = {}; //extract trialId and store in @totalCount\n\n    for (let index = 0; index < enrollment.length; index++) {\n      totalCount.push(enrollment[index].trialId);\n    } //count duplicates and you get how many participants are in trials\n    //stored in @count than stored in @howManyEnrolled\n\n\n    totalCount.forEach(function (i) {\n      count[i] = (count[i] || 0) + 1;\n    });\n    setHowManyEnrolled(count);\n  }, [enrollment]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, trials.map(trial => /*#__PURE__*/React.createElement(Card, Object.assign({\n    key: trial.id\n  }, trial, {\n    isEnrolled: enrolled.includes(trial.id),\n    isMaxEnrolled: trial.maxPartipants >= howManyEnrolled[trial.id],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default TrialList;","map":{"version":3,"sources":["/home/ivan/Documents/projekti2/sim-test/client/src/Components/TrialList.js"],"names":["React","useState","useEffect","axios","Card","TrialList","props","trials","setTrials","howManyEnrolled","setHowManyEnrolled","enrollment","enrolled","fetch","url","sets","result","data","totalCount","count","index","length","push","trialId","forEach","i","map","trial","id","includes","maxPartipants"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAMU,UAAU,GAAGL,KAAK,CAACK,UAAzB;AACA,QAAMC,QAAQ,GAAIN,KAAK,CAACM,QAAxB;;AAEA,QAAMC,KAAK,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACjC,UAAMC,MAAM,GAAG,MAAMb,KAAK,CAACW,GAAD,CAA1B;AACAC,IAAAA,IAAI,CAACC,MAAM,CAACC,IAAR,CAAJ;AACD,GAHD,CANwB,CAWxB;;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,KAAK,CAAC,6BAAD,EAAgCL,SAAhC,CAAL;AACD,GAFQ,EAEN,EAFM,CAAT,CAZwB,CAkB1B;;AACEN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMgB,UAAU,GAAG,EAAnB;AACA,UAAMC,KAAK,GAAG,EAAd,CAFY,CAGZ;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGT,UAAU,CAACU,MAAvC,EAA+CD,KAAK,EAApD,EAAwD;AACtDF,MAAAA,UAAU,CAACI,IAAX,CAAgBX,UAAU,CAACS,KAAD,CAAV,CAAkBG,OAAlC;AACD,KANW,CAOZ;AACA;;;AACAL,IAAAA,UAAU,CAACM,OAAX,CAAmB,UAASC,CAAT,EAAY;AAAEN,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAW,CAACN,KAAK,CAACM,CAAD,CAAL,IAAU,CAAX,IAAgB,CAA3B;AAA8B,KAA/D;AACAf,IAAAA,kBAAkB,CAACS,KAAD,CAAlB;AACH,GAXQ,EAWN,CAACR,UAAD,CAXM,CAAT;AAiBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIJ,MAAM,CAACmB,GAAP,CAAYC,KAAD,iBACT,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACC;AADb,KAEMD,KAFN;AAGE,IAAA,UAAU,EAAEf,QAAQ,CAACiB,QAAT,CAAkBF,KAAK,CAACC,EAAxB,CAHd;AAIE,IAAA,aAAa,EAAED,KAAK,CAACG,aAAN,IAAuBrB,eAAe,CAACkB,KAAK,CAACC,EAAP,CAJvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFJ,CADF;AAaD;;AAED,eAAevB,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./Card\";\n\nfunction TrialList(props) {\n  const [trials, setTrials] = useState([]);\n  const [howManyEnrolled, setHowManyEnrolled] = useState([]);\n  const enrollment = props.enrollment;\n  const enrolled  = props.enrolled\n\n  const fetch = async (url, sets) => {\n    const result = await axios(url);\n    sets(result.data);\n  };\n\n  //Fetch trials\n  useEffect(() => {\n    fetch(\"http://localhost:3000/Trial\", setTrials);\n  }, []);\n\n\n\n//  calculate how many are enrollments \n  useEffect(() => {\n      const totalCount = []\n      const count = {};\n      //extract trialId and store in @totalCount\n      for (let index = 0; index < enrollment.length; index++) {\n        totalCount.push(enrollment[index].trialId)\n      }\n      //count duplicates and you get how many participants are in trials\n      //stored in @count than stored in @howManyEnrolled\n      totalCount.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n      setHowManyEnrolled(count)\n  }, [enrollment]);\n\n\n\n\n  \n  return (\n    <div>\n      {\n        trials.map((trial) => (\n          <Card \n            key={trial.id} \n            {...trial} \n            isEnrolled={enrolled.includes(trial.id)}\n            isMaxEnrolled={trial.maxPartipants >= howManyEnrolled[trial.id]}  \n          />\n          ))}\n    </div>\n  );\n}\n\nexport default TrialList;\n"]},"metadata":{},"sourceType":"module"}